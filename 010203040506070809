local LocalPlayer = game:GetService("Players").LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local StatsService = game:GetService("Stats")
local workspace = game:GetService("Workspace")

local ToggleKey = Enum.KeyCode.Z
local Running = true

local Saved = {
    LastTick = os.clock(),
    LastBallPosition = nil,
    AttemptedParry = false,
}

local function GetBall()
    local RealBall, OtherBall = nil, nil
    for _, Object in pairs(workspace.Balls:GetChildren()) do
        if Object:GetAttribute("realBall") == true then
            RealBall = Object
        else
            OtherBall = Object
        end
    end
    return RealBall, OtherBall
end

local function AttemptParry(OtherBall)
    ReplicatedStorage.Remotes.ParryAttempt:FireServer(1.5, OtherBall.CFrame, (function()
        local Results = {}
        for _, Character in pairs(workspace.Alive:GetChildren()) do
            Results[Character.Name] = Character.HumanoidRootPart.Position
        end
        return Results
    end)(), { math.random(100, 999), math.random(100, 999) })
end

UserInputService.InputBegan:Connect(function(Input, GameProcessed)
    if GameProcessed == false then
        if Input.KeyCode == ToggleKey then
            Running = not Running
        end
    end
end)

while true do
    if Running then
        local RealBall, OtherBall = GetBall()
        if RealBall and OtherBall then
            if Saved.LastBallPosition then
                if RealBall:GetAttribute("target") == Players.LocalPlayer.Name then
                    local DeltaT = os.clock() - Saved.LastTick
                    local VelocityX = (OtherBall.Position.X - Saved.LastBallPosition.X) / DeltaT
                    local VelocityY = (OtherBall.Position.Y - Saved.LastBallPosition.Y) / DeltaT
                    local VelocityZ = (OtherBall.Position.Z - Saved.LastBallPosition.Z) / DeltaT
                    local VelocityMagnitude = math.sqrt(VelocityX^2 + VelocityY^2 + VelocityZ^2)

                    local ServerPing = StatsService.Network.ServerStatsItem["Data Ping"]:GetValue()
                    local DistanceToPlayer = (Players.LocalPlayer.Character.HumanoidRootPart.Position - OtherBall.Position).Magnitude
                    local EstimatedTimeToReachPlayer = (ServerPing / VelocityMagnitude) / (ServerPing / DistanceToPlayer)
                    local TimeToParry = 0.2 * (VelocityMagnitude / DistanceToPlayer)

                    print(EstimatedTimeToReachPlayer, "<=", TimeToParry)

                    if EstimatedTimeToReachPlayer <= TimeToParry then
                        if not Saved.AttemptedParry then
                            print("Parrying...")
                            ReplicatedStorage.Remotes.ParryButtonPress:Fire()
                            Saved.AttemptedParry = true
                        else
                            print("Already attempted parry")
                        end
                    else
                        Saved.AttemptedParry = false
                    end
                else
                    Saved.AttemptedParry = false
                end
            end
            Saved.LastBallPosition = OtherBall.Position
        end
    end
    Saved.LastTick = os.clock()
    wait() -- Adjust the delay as needed
end
